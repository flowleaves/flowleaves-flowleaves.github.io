<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小林coding学习笔记</title>
    <link href="/2024/08/11/%E5%B0%8F%E6%9E%97coding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/11/%E5%B0%8F%E6%9E%97coding%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先在此感谢小林coding的无私分享，在此也十分推荐从事或学习计算机行业的同学想要系统性学习408或者八股文都可以参考该文章，这里将地址附上 ：<a href="https://xiaolincoding.com/">https://xiaolincoding.com/</a></p></blockquote><h2 id="第一章-–-网络学习"><a href="#第一章-–-网络学习" class="headerlink" title="第一章 – 网络学习"></a>第一章 – 网络学习</h2>]]></content>
    
    
    <categories>
      
      <category>计算机基本知识</category>
      
      <category>八股文学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年8月10日	美团笔试（技术卷）</title>
    <link href="/2024/08/10/Untitled/"/>
    <url>/2024/08/10/Untitled/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2024年8月10日美团笔试（技术卷）</p></blockquote><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1 :"></a>Q1 :</h2><p>输入描述：第一行输入n，表示接下来有n数据，第二行输入标准答案tel  接下来n行输入n组数据<br>问题：请你设计一个算法，从数据组中找到标准答案，数据会从长度小的开始遍历，长度相同的数据随机遍历，请问需要查询几次才能找到标准答案 且当之前遍历过的数据不会在遍历，如 以确认“ac”不是答案，后续将不再查询 “ac”<br>输出描述：输出最少需要查询次数和最多需要查询次数  </p><h3 id="解决算法"><a href="#解决算法" class="headerlink" title="解决算法"></a>解决算法</h3><blockquote><p>解题思路：<br>排序：首先按长度对数据进行排序，长度相同的数据保持原始顺序。<br>遍历查找：遍历数据列表，找到标准答案所在的位置，记录查询次数。</p></blockquote><pre><code class="hljs">def find_query_times(n, tel, data_list):  # 根据长度排序，长度相同的保持原始顺序  sorted_data = sorted(data_list, key=len)  min_queries = 0  max_queries = 0  for i, data in enumerate(sorted_data):</code></pre><p>          max_queries +&#x3D; 1<br>          if data &#x3D;&#x3D; tel:<br>              min_queries &#x3D; max_queries<br>              break<br>      return min_queries, max_queries</p><p>    #ACM模式模式下需要自行补一个输入输出</p><h2 id="Q2："><a href="#Q2：" class="headerlink" title="Q2："></a>Q2：</h2><p>小美有一个长度为 n 的数组 a1,a2,….,an ，他可以对数组进行如下操作：<br>删除第一个元素 a1，同时数组的长度减一，花费为 x。<br>删除整个数组，花费为 k*MEX(a) （其中 MEX(a) 表示 a 中未出现过的最小非负整数。例如 [0,1,2,4] 的 MEX 为 3 ）。<br>小美想知道将 a 数组全部清空的最小代价是多少，请你帮帮他吧。</p><h3 id="解决算法-1"><a href="#解决算法-1" class="headerlink" title="解决算法"></a>解决算法</h3><blockquote><p>初始化：计算初始数组的 MEX 和 k * MEX(a) 的值。<br>动态规划：定义 dp[i] 表示从数组 a[i] 开始清空剩余数组所需的最小代价。<br>状态转移：dp[i] &#x3D; min(dp[i + 1] + x, k * MEX(a[i:]))：即比较删除第一个元素后的代价和直接删除剩余数组的代价。初始状态 dp[n + 1] &#x3D; 0：表示没有元素时，清空代价为 0。<br>计算 MEX：在遍历时，动态更新当前子数组的 MEX 值。  </p></blockquote><pre><code class="hljs">def find_min_cost(n, a, x, k):  # 计算最小代价  dp = [0] * (n + 1)  mex = [0] * (n + 1)  # 初始 mex  present = set()  for i in range(1, n + 1):      present.add(a[i - 1])      mex[i] = 0      while mex[i] in present:          mex[i] += 1  # 动态规划计算最小代价  for i in range(n - 1, -1, -1):      dp[i] = min(dp[i + 1] + x, k * mex[i + 1])  return dp[0]  </code></pre><p>    #ACM模式自行写输入输出</p><h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3:"></a>Q3:</h2><p>小美的彩带是由一条长度为的彩带一直无限循环得到的，彩<br>带的每一个位置都有一个颜色，用Q表示。因此当&gt;n时，ai&#x3D;ai-n.<br>小美每次会从左往后或从右往左剪一段长度为x的彩带，她想知<br>道她每次剪下来的彩带有多少种颜色。</p><h3 id="解决算法-2"><a href="#解决算法-2" class="headerlink" title="解决算法"></a>解决算法</h3><blockquote><p>解题思路<br>确定剪下来的彩带段：<br>假设彩带的基本长度为 n，剪下的长度为 x，则我们要处理的彩带段为从某个起始位置 i 开始的 x 个位置。如果剪下的长度 x 小于 n，则彩带不循环；否则彩带循环，我们需要通过模运算来确定需要遍历的实际彩带段。<br>统计颜色种类：<br>通过集合（Set）来统计剪下来的彩带段中不同颜色的数量。</p></blockquote><pre><code class="hljs">def count_unique_colors(a, n, c, x):if c == &#39;L&#39;:    # 从左往右剪    start = 0    end = xelse:    # 从右往左剪    start = n - x % n    end = ncolors_set = set()# 将长度投影到彩带上for i in range(start, end):    colors_set.add(a[i % n])return len(colors_set)# 输入处理n, q = map(int, input().split())a = list(map(int, input().split()))for _ in range(q):    c, x = input().split()    x = int(x)    result = count_unique_colors(a, n, c, x)    print(result)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定时关机/重启小助手v1.0</title>
    <link href="/2024/08/08/%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA-%E9%87%8D%E5%90%AF%E5%B0%8F%E5%8A%A9%E6%89%8B/"/>
    <url>/2024/08/08/%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA-%E9%87%8D%E5%90%AF%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><meta name="referrer" content="no-referrer">编码环境 ：pycharm + python 3.11 <p>所用的库 ：tkinter、time、os、datetime</p><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><p><img src="https://gitee.com/leaveloft/leaveloft/raw/master/202408081200208.png" alt="定时开机小助手"></p><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://wwi.lanzoue.com/iSlJV26ukxgd">https://wwi.lanzoue.com/iSlJV26ukxgd</a>  密码:djqd</p><h2 id="源码分享"><a href="#源码分享" class="headerlink" title="源码分享"></a>源码分享</h2><p>编码过程较为简单，大家可以自行本地部署，并进行调整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> ttk, messagebox<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoShutdownApp</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-variable language_">self</span>.root = root<br>        <span class="hljs-variable language_">self</span>.root.title(<span class="hljs-string">&#x27;自动关机/重启&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.root.geometry(<span class="hljs-string">&#x27;300x200&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.root.iconbitmap(<span class="hljs-string">&#x27;static/photo/oip.ico&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.center_window(<span class="hljs-number">300</span>, <span class="hljs-number">260</span>)<br><br>        <span class="hljs-variable language_">self</span>.style = ttk.Style()<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&#x27;TFrame&#x27;</span>, background=<span class="hljs-string">&#x27;#f0f0f0&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&#x27;TLabel&#x27;</span>, background=<span class="hljs-string">&#x27;#f0f0f0&#x27;</span>, font=(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&#x27;TButton&#x27;</span>, font=(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&#x27;TRadiobutton&#x27;</span>, background=<span class="hljs-string">&#x27;#f0f0f0&#x27;</span>, font=(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">12</span>))<br>        <span class="hljs-variable language_">self</span>.style.configure(<span class="hljs-string">&#x27;TEntry&#x27;</span>, font=(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">12</span>))<br><br>        main_frame = ttk.Frame(<span class="hljs-variable language_">self</span>.root, padding=<span class="hljs-string">&quot;10&quot;</span>)<br>        main_frame.pack(fill=tk.BOTH, expand=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-variable language_">self</span>.var = tk.IntVar(value=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.radio_shutdown = ttk.Radiobutton(main_frame, text=<span class="hljs-string">&quot;关机&quot;</span>, variable=<span class="hljs-variable language_">self</span>.var, value=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.radio_restart = ttk.Radiobutton(main_frame, text=<span class="hljs-string">&quot;重启&quot;</span>, variable=<span class="hljs-variable language_">self</span>.var, value=<span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.radio_shutdown.pack(pady=<span class="hljs-number">5</span>)<br>        <span class="hljs-variable language_">self</span>.radio_restart.pack(pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.label_minutes = ttk.Label(main_frame, text=<span class="hljs-string">&quot;输入分钟数:&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.label_minutes.pack(pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.entry_minutes = ttk.Entry(main_frame)<br>        <span class="hljs-variable language_">self</span>.entry_minutes.pack(pady=<span class="hljs-number">5</span>)<br>        <span class="hljs-variable language_">self</span>.entry_minutes.bind(<span class="hljs-string">&quot;&lt;KeyRelease&gt;&quot;</span>, <span class="hljs-variable language_">self</span>.update_time)<br><br>        <span class="hljs-variable language_">self</span>.label_result = ttk.Label(main_frame, text=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.label_result.pack(pady=<span class="hljs-number">5</span>)<br><br>        <span class="hljs-variable language_">self</span>.button_execute = ttk.Button(main_frame, text=<span class="hljs-string">&quot;执行操作&quot;</span>, command=<span class="hljs-variable language_">self</span>.execute_action)<br>        <span class="hljs-variable language_">self</span>.button_execute.pack(pady=<span class="hljs-number">5</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">center_window</span>(<span class="hljs-params">self, width, height</span>):<br>        screen_width = <span class="hljs-variable language_">self</span>.root.winfo_screenwidth()<br>        screen_height = <span class="hljs-variable language_">self</span>.root.winfo_screenheight()<br>        x = (screen_width // <span class="hljs-number">2</span>) - (width // <span class="hljs-number">2</span>)<br>        y = (screen_height // <span class="hljs-number">2</span>) - (height // <span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.root.geometry(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span>+<span class="hljs-subst">&#123;x&#125;</span>+<span class="hljs-subst">&#123;y&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_time</span>(<span class="hljs-params">self, minutes</span>):<br>        future_time = datetime.now() + timedelta(minutes=<span class="hljs-built_in">int</span>(minutes))<br>        <span class="hljs-keyword">return</span> future_time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_time</span>(<span class="hljs-params">self, event</span>):<br>        minutes = <span class="hljs-variable language_">self</span>.entry_minutes.get()<br>        <span class="hljs-keyword">if</span> minutes.isdigit():<br>            <span class="hljs-variable language_">self</span>.label_result.config(text=<span class="hljs-string">f&quot;预计时间: <span class="hljs-subst">&#123;self.calculate_time(minutes)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.label_result.config(text=<span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_action</span>(<span class="hljs-params">self</span>):<br>        minutes = <span class="hljs-variable language_">self</span>.entry_minutes.get()<br>        <span class="hljs-keyword">if</span> minutes.isdigit():<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.var.get() == <span class="hljs-number">1</span>:<br>                <span class="hljs-variable language_">self</span>.schedule_shutdown(<span class="hljs-built_in">int</span>(minutes))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.schedule_restart(<span class="hljs-built_in">int</span>(minutes))<br>        <span class="hljs-keyword">else</span>:<br>            messagebox.showwarning(<span class="hljs-string">&#x27;错误&#x27;</span>, <span class="hljs-string">&#x27;请输入有效的分钟数&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">schedule_shutdown</span>(<span class="hljs-params">self, minutes</span>):<br>        threading.Thread(target=<span class="hljs-variable language_">self</span>.shutdown, args=(minutes,)).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">schedule_restart</span>(<span class="hljs-params">self, minutes</span>):<br>        threading.Thread(target=<span class="hljs-variable language_">self</span>.restart, args=(minutes,)).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shutdown</span>(<span class="hljs-params">self, minutes</span>):<br>        time.sleep(minutes * <span class="hljs-number">60</span>)<br>        os.system(<span class="hljs-string">&#x27;shutdown /s /t 1&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">restart</span>(<span class="hljs-params">self, minutes</span>):<br>        time.sleep(minutes * <span class="hljs-number">60</span>)<br>        os.system(<span class="hljs-string">&#x27;shutdown /r /t 1&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root = tk.Tk()<br>    app = AutoShutdownApp(root)<br>    root.mainloop()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>定时关机</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
